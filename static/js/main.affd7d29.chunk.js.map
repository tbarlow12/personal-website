{"version":3,"sources":["services/blogService.ts","react/components/blog/blogPostPreview.tsx","react/pages/blogPage.tsx","react/pages/homePage.tsx","react/pages/blogPostPage.tsx","react/components/shell/mainContentRouter.tsx","scss/icons.tsx","react/components/shell/sidebar.tsx","services/structureService.ts","react/components/shell/terminal/terminal.tsx","react/App.tsx","serviceWorker.ts","index.tsx"],"names":["md5","require","BlogService","this","getBlogPosts","postsPreviews","blogPost","data","path","update","title","digest","substr","blogPostId","getBlogPost","postsFull","posts","map","post","grayMatter","content","preview","getBlogPostPath","BlogPostPreview","className","to","Date","date","toDateString","source","BlogPage","getPreviews","HomePage","BlogPostPage","pageProps","match","location","pathname","Error","getFullPost","MainContentRouter","exact","component","icons","home","blog","github","linkedin","resume","tasks","code","education","basketball","volunteer","terminal","Sidebar","sidebarItems","name","icon","item","StructureService","structure","initializeStructure","targetPath","getStructure","Object","keys","children","join","err","structureToPath","startsWith","currentSplit","split","targetSplit","concat","currentStructure","parent","route","blogStructure","MyTerminal","props","structureService","commands","echo","description","usage","fn","bind","ls","cd","getPath","welcomeMessage","promptLabel","promptLabelStyle","color","noHistory","target","arguments","Array","from","transformPath","history","push","React","Component","TerminalWithRouter","withRouter","App","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.affd7d29.chunk.js","sourcesContent":["\nimport grayMatter from \"gray-matter\";\nimport { BlogPostMetadata } from \"../models/blog\";\nimport postsPreviews from \"../blog/posts-preview.json\";\nimport postsFull from \"../blog/posts-full.json\"\nconst md5 = require(\"md5.js\");\n\nexport interface BlogPostJson {\n  name: string;\n  content: string;\n}\n\nexport class BlogService {\n  \n  public static getPreviews() {\n    return this.getBlogPosts(postsPreviews);\n  }\n\n  public static getBlogPostPath(blogPost: BlogPostMetadata) {\n    if (blogPost.data.path) {\n      return blogPost.data.path;\n    }\n    return new md5().update(blogPost.data.title).digest(\"hex\").substr(0, 8);\n  }\n\n  public static getFullPost(blogPostId: string) {\n    return this.getBlogPost((postsFull as { [id: string]: BlogPostJson })[blogPostId]);\n  }\n\n  private static getBlogPosts(posts: BlogPostJson[]): BlogPostMetadata[] {\n    return posts.map(this.getBlogPost);\n  }\n\n  private static getBlogPost(post: BlogPostJson): BlogPostMetadata {\n    const blogPost: BlogPostMetadata = grayMatter(post.content) as any;\n    if (!blogPost.data.preview) {\n      blogPost.data.preview = \"No preview\";\n    }\n    if (!blogPost.data.path) {\n      blogPost.data.path = BlogService.getBlogPostPath(blogPost);\n    }\n    return blogPost;\n  }\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { BlogPostMetadata } from \"../../../models/blog\";\nimport { NavLink } from \"react-router-dom\";\n\nexport function BlogPostPreview(blogPost: BlogPostMetadata) {\n\n  return (\n    <div className=\"blog-post-preview\">\n      <div className=\"blog-post-preview-title\">\n        <NavLink title={blogPost.data.title} to={`/blog/${blogPost.data.path}`} >{blogPost.data.title}</NavLink>\n      </div>\n      <div>{new Date(blogPost.data.date).toDateString()}</div>\n      <div>{blogPost.data.preview}</div>\n      <div className=\"blog-post-preview-content\">\n        <ReactMarkdown source={blogPost.content}/>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport { BlogService } from \"../../services/blogService\";\nimport { BlogPostPreview } from \"../components/blog/blogPostPreview\";\n\nexport interface BlogPageState {\n  \n}\n\nexport function BlogPage() {\n\n  return (\n    <div className=\"blog-page\">\n      {BlogService.getPreviews().map(BlogPostPreview)}\n    </div>\n  )\n}\n\n\n","import React from \"react\";\n\nexport interface HomePageState {\n  pulls: any[];\n  events: any[]\n}\n\nexport function HomePage() {\n\n  // const [pulls, setPulls] = useState();\n  // const [events, setEvents] = useState();\n\n  // const githubService = new GitHubService();\n  // githubService.pulls(\"serverless\", \"serverless-azure-functions\")\n  //   .then((pullResult) => setPulls(pullResult));\n  // githubService.userEvents(\"tbarlow12\")\n  //   .then((eventsResult) => setEvents(eventsResult))\n\n  return (\n    <div>\n      This is my home page      \n      {/* Look at useEffect for fetching data {pulls && pulls.map((pull: any) => <div>{pull.title}</div>)}\n      {events && events.map((event: any) => <div>{event.type}</div>)} */}\n    </div>\n  )\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { BlogService } from \"../../services/blogService\";\nimport { PageProps } from \"../../models/generic\";\n\nexport function BlogPostPage(pageProps: PageProps) {\n  const match = pageProps.location.pathname.match(/blog\\/(.*)/);\n  let blogPostId: string;\n  if (match) {\n    blogPostId = match[1];\n  } else {\n    throw new Error(\"Invalid URL\");\n  }\n  const blogPost = BlogService.getFullPost(blogPostId);\n  return (\n    <div className=\"blog-post-preview\">\n      <div className=\"blog-post-preview-title\">{blogPost.data.title}</div>\n      <div>{new Date(blogPost.data.date).toDateString()}</div>\n      <div>{blogPost.data.preview}</div>\n      <div className=\"blog-post-preview-content\">\n        <ReactMarkdown source={blogPost.content}/>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { BlogPage } from \"../../pages/blogPage\"\nimport { HomePage } from \"../../pages/homePage\";\nimport { BlogPostPage } from \"../../pages/blogPostPage\";\n\nexport default function MainContentRouter() {\n  return (\n    <div className=\"app-main-content\">\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/blog\" exact component={BlogPage} />\n        <Route path=\"/blog/:blogPost\" component={BlogPostPage} />\n        <Route component={HomePage} />\n      </Switch>\n    </div>\n  )\n}","export const icons = {\n  home: \"fas fa-home\",\n  blog: \"fas fa-keyboard\",\n  github: \"fab fa-github\",\n  linkedin: \"fab fa-linkedin\",\n  resume: \"fas fa-file-alt\",\n  tasks: \"fas fa-tasks\",\n  code: \"fas fa-code-branch\",\n  education: \"fas fa-user-graduate\",\n  basketball: \"fas fa-basketball-ball\",\n  volunteer: \"fas fa-hands-helping\",\n  terminal: \"fas fa-terminal\"\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { icons } from \"../../../scss/icons\";\n\nexport interface SidebarItem {\n  name: string;\n  path: string;\n  icon: string;\n}\n\nexport function Sidebar() {\n\n  const sidebarItems: SidebarItem[] = [\n    {\n      name: \"Home\",\n      path: \"/\",\n      icon: icons.home\n    },\n    {\n      name: \"Home\",\n      path: \"/blog\",\n      icon: icons.blog\n    },\n    {\n      name: \"Resume\",\n      path: \"/\",\n      icon: icons.resume,\n    },\n    {\n      name: \"GitHub\",\n      path: \"/github\",\n      icon: icons.github\n    },\n    {\n      name: \"LinkedIn\",\n      path: \"/linkedin\",\n      icon: icons.linkedin\n    },\n    {\n      name: \"Interests\",\n      path: \"/interests\",\n      icon: icons.basketball,\n    },\n    {\n      name: \"Terminal\",\n      path: \"/\",\n      icon: icons.terminal,\n    }\n  ]\n\n\n\n  return (\n    <ul className=\"app-sidebar\">\n      {sidebarItems.map((item) =>\n        <li className=\"app-sidebar-item\">\n        <NavLink to={item.path}>\n          <i className={`app-sidebar-item-icon ${item.icon}`}></i>\n        </NavLink>\n      </li>)}\n    </ul>\n  )\n}","// import postsPreview from \"../../../../blog/posts-preview.json\";\nimport postsFull from \"../blog/posts-full.json\";\n\nexport interface Structure {\n  route: string;\n  children: {\n    [id: string]: Structure,\n  };\n  parent?: Structure;\n}\n\nexport class StructureService {\n\n  private structure: Structure;\n\n  public constructor() {\n    this.structure = this.initializeStructure();\n  }\n\n  public ls(pathname: string, targetPath?: string): string {\n    try {\n      const structure = this.getStructure(pathname, targetPath);\n      return Object.keys(structure.children).join(\" \");\n    } catch (err) {\n      return `Invalid command ${err}`;\n    }\n  }\n\n  public transformPath(pathname: string, targetPath: string): string {\n    const structure = this.getStructure(pathname, targetPath);\n    return this.structureToPath(structure);\n  }\n\n  private getStructure(pathname: string, targetPath?: string) {\n    if (targetPath === \"~\") {\n      return this.structure;\n    }\n    if (targetPath && targetPath.startsWith(\"~/\")) {\n      pathname = \"\";\n      targetPath = targetPath.substr(2);\n    }\n    let currentSplit = pathname.split(\"/\");\n    const targetSplit = (targetPath) ? targetPath.split(\"/\") : []\n    \n    currentSplit = currentSplit.concat(targetSplit);\n\n    let currentStructure = this.structure;\n\n    for (const path of currentSplit) {\n      if (path === \"..\") {\n        if (!currentStructure.parent) {\n          throw new Error(`Invalid path: ${pathname + targetPath}`);\n        }\n        currentStructure = currentStructure.parent;\n      }\n      if (currentStructure.children[path]) {\n        currentStructure = currentStructure.children[path]\n      }\n    }\n    return currentStructure;\n  }\n\n  private structureToPath(structure: Structure): string {\n    return (structure.parent) \n      ? this.structureToPath(structure.parent) + structure.route\n      : structure.route\n  }\n\n  private initializeStructure(): Structure {\n    const structure: Structure = {\n      route: \"\",\n      children: {}\n    }\n\n    const blogStructure: Structure = {\n      route: \"/blog\",\n      children: {},\n      parent: structure\n    }\n\n    for (const post of Object.keys(postsFull)) {\n      blogStructure.children[post] = {\n        route: `/${post}`,\n        children: {},\n        parent: blogStructure\n      }\n    }\n    structure.children.blog = blogStructure\n    return structure;\n  }\n}\n","import React from \"react\";\nimport Terminal from \"react-console-emulator\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { StructureService } from \"../../../../services/structureService\";\n\nexport interface MyTerminalProps extends RouteComponentProps { }\n\nexport default class MyTerminal extends React.Component<MyTerminalProps> {\n\n  private structureService: StructureService;\n\n  public constructor(props: MyTerminalProps) {\n    super(props);\n    this.structureService = new StructureService();\n  }\n\n  commands = {\n    echo: {\n      description: \"Echo a passed string.\",\n      usage: \"echo <string>\",\n      fn: this.echo.bind(this)\n    },\n    ls: {\n      description: \"View available navigation options\",\n      usage: \"ls\",\n      fn: this.ls.bind(this)\n    },\n    cd: {\n      description: \"Navigate to another page\",\n      usage: \"cd <string>\",\n      fn: this.cd.bind(this)\n    }\n  }\n\n  render () {\n\n    const { location } = this.props;\n    \n    return (\n      <div className=\"app-main-footer\">\n        <Terminal\n          commands={this.commands}\n          welcomeMessage={\"Welcome to my website! Run help for available commands\"}\n          promptLabel={`user@TBarlow:${this.getPath(location.pathname)}`}\n          promptLabelStyle={{color: \"#66CCCC\"}}\n          noHistory={true}\n        />\n      </div>\n    )\n  }\n\n  ls() {\n    const { pathname } = this.props.location;\n    const target = arguments[0];\n    return this.structureService.ls(pathname, target);\n  }\n\n  echo() {\n    return `${Array.from(arguments).join(\" \")}`\n  }\n\n  cd () {\n    const target = arguments[0];\n    const location = this.props.location;\n    try {\n      const path = this.structureService.transformPath(location.pathname, target);\n      this.props.history.push(path)\n    } catch {\n      return `Invalid path: ${location.pathname + target}`\n    }\n  }\n\n  getPath = (pathname: string) => {\n    if (pathname === \"/\") {\n      return \"~\"\n    }\n    return `~${pathname}`;\n  }\n}\n\nexport const TerminalWithRouter = withRouter(MyTerminal);","import React from 'react';\nimport { HashRouter } from \"react-router-dom\";\nimport '../scss/App.css';\nimport \"../scss/App.scss\";\nimport MainContentRouter from \"./components/shell/mainContentRouter\";\nimport { Sidebar } from \"./components/shell/sidebar\";\nimport { TerminalWithRouter } from './components/shell/terminal/terminal';\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"app\">\n        <HashRouter>\n            <Sidebar/>\n            <div className=\"app-main\">\n              <div className=\"app-header\">\n                <h1>Tanner Barlow</h1>\n              </div>\n              <MainContentRouter/>\n              <TerminalWithRouter />\n            </div>\n        </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}