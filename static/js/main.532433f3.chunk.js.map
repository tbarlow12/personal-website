{"version":3,"sources":["services/blogService.ts","react/components/blog/blogPostPreview.tsx","react/pages/blogPage.tsx","react/pages/homePage.tsx","react/pages/blogPostPage.tsx","react/pages/projectsPage.tsx","react/pages/interestsPage.tsx","react/components/shell/mainContentRouter.tsx","scss/icons.tsx","react/components/shell/sidebar.tsx","services/structureService.ts","react/components/shell/terminal/terminal.tsx","react/components/shell/header.tsx","react/App.tsx","serviceWorker.ts","index.tsx"],"names":["md5","require","BlogService","this","getBlogPosts","postsPreviews","blogPost","data","path","update","title","digest","substr","blogPostId","getBlogPost","postsFull","posts","map","sort","a","b","Date","date","post","grayMatter","content","preview","getBlogPostPath","BlogPostPreview","className","to","toDateString","source","BlogPage","getPreviews","HomePage","homePage","BlogPostPage","pageProps","match","location","pathname","Error","getFullPost","ProjectsPage","projectsPage","InterestsPage","interestsPage","MainContentRouter","exact","component","icons","home","blog","github","linkedin","resume","tasks","code","education","basketball","volunteer","terminal","sun","moon","trash","Sidebar","props","navLinks","name","icon","externalLinks","link","tools","action","toggleTerminal","darkTheme","push","toggleTheme","item","href","target","rel","onClick","StructureService","structure","initializeStructure","targetPath","getStructure","Object","keys","children","join","err","structureToPath","startsWith","currentSplit","split","targetSplit","concat","currentStructure","parent","route","projectsStructure","interestsStructure","resumeStructure","blogStructure","MyTerminal","structureService","commands","echo","description","usage","fn","bind","ls","cd","kill","closeTerminal","getPath","state","open","setState","welcomeMessage","promptLabel","promptLabelStyle","color","noHistory","styles","maxHeight","arguments","Array","from","transformPath","history","React","Component","TerminalWithRouter","withRouter","Header","App","useState","isMobile","terminalOpen","setTerminalOpen","setDarkTheme","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.532433f3.chunk.js","sourcesContent":["\nimport grayMatter from \"gray-matter\";\nimport { BlogPostMetadata } from \"../models/blog\";\nimport postsPreviews from \"../content/blog/posts-preview.json\";\nimport postsFull from \"../content/blog/posts-full.json\"\nconst md5 = require(\"md5.js\");\n\nexport interface BlogPostJson {\n  name: string;\n  content: string;\n}\n\nexport class BlogService {\n  \n  public static getPreviews() {\n    return this.getBlogPosts(postsPreviews);\n  }\n\n  public static getBlogPostPath(blogPost: BlogPostMetadata) {\n    if (blogPost.data.path) {\n      return blogPost.data.path;\n    }\n    return new md5().update(blogPost.data.title).digest(\"hex\").substr(0, 8);\n  }\n\n  public static getFullPost(blogPostId: string) {\n    return this.getBlogPost((postsFull as { [id: string]: BlogPostJson })[blogPostId]);\n  }\n\n  private static getBlogPosts(posts: BlogPostJson[]): BlogPostMetadata[] {\n    return posts\n      .map(this.getBlogPost)\n      .sort((a, b) =>\n        (new Date(a.data.date) < new Date(b.data.date)) ? 1 : -1\n      );\n  }\n\n  private static getBlogPost(post: BlogPostJson): BlogPostMetadata {\n    const blogPost: BlogPostMetadata = grayMatter(post.content) as any;\n    if (!blogPost.data.preview) {\n      blogPost.data.preview = \"No preview\";\n    }\n    if (!blogPost.data.path) {\n      blogPost.data.path = BlogService.getBlogPostPath(blogPost);\n    }\n    return blogPost;\n  }\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { BlogPostMetadata } from \"../../../models/blog\";\nimport { NavLink } from \"react-router-dom\";\n\nexport function BlogPostPreview(blogPost: BlogPostMetadata) {\n\n  return (\n    <div className=\"blog-post-preview\">\n      <div className=\"blog-post-preview-title\">\n        <NavLink title={blogPost.data.title} to={`/blog/${blogPost.data.path}`} >{blogPost.data.title}</NavLink>\n      </div>\n      <div>{new Date(blogPost.data.date).toDateString()}</div>\n      <div>{blogPost.data.preview}</div>\n      <div className=\"blog-post-preview-content\">\n        <ReactMarkdown source={blogPost.content}/>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport { BlogService } from \"../../services/blogService\";\nimport { BlogPostPreview } from \"../components/blog/blogPostPreview\";\n\nexport interface BlogPageState {\n  \n}\n\nexport function BlogPage() {\n\n  return (\n    <div className=\"blog-page\">\n      {BlogService.getPreviews().map(BlogPostPreview)}\n    </div>\n  )\n}\n\n\n","import React from \"react\";\nimport homePage from \"../../content/pages/home.json\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport function HomePage() {\n  return (\n    <div className=\"app-page-home\">\n      <ReactMarkdown source={homePage.content} />\n    </div>\n  )\n}\n","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { BlogService } from \"../../services/blogService\";\nimport { PageProps } from \"../../models/generic\";\n\nexport function BlogPostPage(pageProps: PageProps) {\n  const match = pageProps.location.pathname.match(/blog\\/(.*)/);\n  let blogPostId: string;\n  if (match) {\n    blogPostId = match[1];\n  } else {\n    throw new Error(\"Invalid URL\");\n  }\n  const blogPost = BlogService.getFullPost(blogPostId);\n  return (\n    <div className=\"blog-post-preview\">\n      <div className=\"blog-post-preview-title\">{blogPost.data.title}</div>\n      <div>{new Date(blogPost.data.date).toDateString()}</div>\n      <div>{blogPost.data.preview}</div>\n      <div className=\"blog-post-preview-content\">\n        <ReactMarkdown source={blogPost.content}/>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport projectsPage from \"../../content/pages/projects.json\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport function ProjectsPage() {\n  return (\n    <div className=\"app-page-projects\">\n      <ReactMarkdown source={projectsPage.content} />\n    </div>\n  )\n}\n","import React from \"react\";\nimport interestsPage from \"../../content/pages/interests.json\";\nimport ReactMarkdown from \"react-markdown\";\n\nexport function InterestsPage() {\n  return (\n    <div className=\"app-page-interests\">\n      <ReactMarkdown source={interestsPage.content} />\n    </div>\n  )\n}\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { BlogPage } from \"../../pages/blogPage\"\nimport { HomePage } from \"../../pages/homePage\";\nimport { BlogPostPage } from \"../../pages/blogPostPage\";\nimport { ProjectsPage } from \"../../pages/projectsPage\";\nimport { InterestsPage } from \"../../pages/interestsPage\";\n\nexport default function MainContentRouter() {\n  return (\n    <div className=\"app-main-content\">\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/blog\" exact component={BlogPage} />\n        <Route path=\"/blog/:blogPost\" component={BlogPostPage} />\n        <Route path=\"/projects\" exact component={ProjectsPage} />\n        <Route path=\"/interests\" exact component={InterestsPage} />\n        <Route component={HomePage} />\n      </Switch>\n    </div>\n  )\n}","export const icons = {\n  home: \"fas fa-home\",\n  blog: \"fas fa-keyboard\",\n  github: \"fab fa-github\",\n  linkedin: \"fab fa-linkedin\",\n  resume: \"fas fa-file-alt\",\n  tasks: \"fas fa-tasks\",\n  code: \"fas fa-code-branch\",\n  education: \"fas fa-user-graduate\",\n  basketball: \"fas fa-basketball-ball\",\n  volunteer: \"fas fa-hands-helping\",\n  terminal: \"fas fa-terminal\",\n  sun: \"fas fa-sun\",\n  moon: \"fas fa-moon\",\n  trash: \"far fa-trash-alt\",\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { icons } from \"../../../scss/icons\";\n\n\nexport interface SidebarProps {\n  toggleTerminal: () => void;\n  toggleTheme: () => void;\n  darkTheme: boolean;\n}\n\nexport interface SidebarItem {\n  name: string;\n  icon: string;\n}\n\nexport interface SidebarNavLink extends SidebarItem {\n  path: string;\n}\n\nexport interface SidebarExternalLink extends SidebarItem {\n  link: string;\n}\n\nexport interface SidebarTool extends SidebarItem {\n  action: () => void;\n}\n\n\nexport function Sidebar(props: SidebarProps) {\n\n  const navLinks: SidebarNavLink[] = [\n    {\n      name: \"Home\",\n      path: \"/\",\n      icon: icons.home\n    },\n    {\n      name: \"Home\",\n      path: \"/blog\",\n      icon: icons.blog\n    },\n    {\n      name: \"Projects\",\n      path: \"/projects\",\n      icon: icons.code\n    },\n    {\n      name: \"Resume\",\n      path: \"/resume\",\n      icon: icons.resume,\n    },\n    \n    {\n      name: \"Interests\",\n      path: \"/interests\",\n      icon: icons.basketball,\n    },\n  ]\n\n  const externalLinks: SidebarExternalLink[] = [\n    {\n      name: \"GitHub\",\n      link: \"https://github.com/tbarlow12\",\n      icon: icons.github\n    },\n    {\n      name: \"LinkedIn\",\n      link: \"https://www.linkedin.com/in/tannerbarlow/\",\n      icon: icons.linkedin\n    },\n  ]\n\n  const tools: SidebarTool[] = [\n    {\n      name: \"Terminal\",\n      icon: icons.terminal,\n      action: props.toggleTerminal\n    }\n  ]\n\n  if (props.darkTheme) {\n    tools.push({\n      name: \"Light Theme\",\n      icon: icons.sun,\n      action: props.toggleTheme\n    })\n  } else {\n    tools.push({\n      name: \"Dark Theme\",\n      icon: icons.moon,\n      action: props.toggleTheme\n    })\n  }\n\n  return (\n    <ul className=\"app-sidebar\">\n      <div className=\"app-sidebar-links\">\n        {navLinks.map((item) =>\n          <li className=\"app-sidebar-item\">\n            <NavLink to={item.path}>\n              <i className={`app-sidebar-item-icon ${item.icon}`}></i>\n            </NavLink>\n          </li>)\n        }\n        {externalLinks.map((item) =>\n          <li className=\"app-sidebar-item\">\n            <a href={item.link} target=\"_blank\" rel=\"noopener noreferrer\">\n              <i className={`app-sidebar-item-icon ${item.icon}`}></i>\n            </a>\n          </li>)\n        }\n      </div>\n      <div className=\"app-sidebar-tools\">\n        {tools.map((item) =>\n          <li className=\"app-sidebar-item\" onClick={() => item.action()}>\n            <i className={`app-sidebar-item-icon ${item.icon}`}></i>\n          </li>)\n        }\n      </div>      \n    </ul>\n  )\n}","import postsFull from \"../content/blog/posts-full.json\";\n\nexport interface Structure {\n  route: string;\n  children: {\n    [id: string]: Structure,\n  };\n  parent?: Structure;\n}\n\nexport class StructureService {\n\n  private structure: Structure;\n\n  public constructor() {\n    this.structure = this.initializeStructure();\n  }\n\n  public ls(pathname: string, targetPath?: string): string {\n    try {\n      const structure = this.getStructure(pathname, targetPath);\n      return Object.keys(structure.children).join(\" \");\n    } catch (err) {\n      return `Invalid command ${err}`;\n    }\n  }\n\n  public transformPath(pathname: string, targetPath: string): string {\n    const structure = this.getStructure(pathname, targetPath);\n    return this.structureToPath(structure);\n  }\n\n  private getStructure(pathname: string, targetPath?: string) {\n    if (targetPath === \"~\") {\n      return this.structure;\n    }\n    if (targetPath && targetPath.startsWith(\"~/\")) {\n      pathname = \"\";\n      targetPath = targetPath.substr(2);\n    }\n    let currentSplit = pathname.split(\"/\");\n    const targetSplit = (targetPath) ? targetPath.split(\"/\") : []\n    \n    currentSplit = currentSplit.concat(targetSplit);\n\n    let currentStructure = this.structure;\n\n    for (const path of currentSplit) {\n      if (path === \"..\") {\n        if (!currentStructure.parent) {\n          throw new Error(`Invalid path: ${pathname + targetPath}`);\n        }\n        currentStructure = currentStructure.parent;\n      }\n      if (currentStructure.children[path]) {\n        currentStructure = currentStructure.children[path]\n      }\n    }\n    return currentStructure;\n  }\n\n  private structureToPath(structure: Structure): string {\n    return (structure.parent) \n      ? this.structureToPath(structure.parent) + structure.route\n      : structure.route\n  }\n\n  private initializeStructure(): Structure {\n    const structure: Structure = {\n      route: \"\",\n      children: {}\n    }\n\n    const projectsStructure: Structure =  {\n      route: \"/projects\",\n      children: {},\n      parent: structure\n    }\n\n    const interestsStructure: Structure =  {\n      route: \"/interests\",\n      children: {},\n      parent: structure\n    }\n\n    const resumeStructure: Structure = {\n      route: \"/resume\",\n      children: {},\n      parent: structure\n    }\n\n    structure.children[\"projects\"] = projectsStructure;\n    structure.children[\"interests\"] = interestsStructure;\n    structure.children[\"resume\"] = resumeStructure;\n\n    const blogStructure: Structure = {\n      route: \"/blog\",\n      children: {},\n      parent: structure\n    }\n\n    for (const post of Object.keys(postsFull)) {\n      blogStructure.children[post] = {\n        route: `/${post}`,\n        children: {},\n        parent: blogStructure\n      }\n    }\n    structure.children.blog = blogStructure\n    return structure;\n  }\n}\n","import React from \"react\";\nimport Terminal from \"react-console-emulator\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { StructureService } from \"../../../../services/structureService\";\nimport { icons } from \"../../../../scss/icons\";\n\nexport interface MyTerminalProps extends RouteComponentProps {\n  open: boolean;\n  closeTerminal: () => void;\n}\n\nexport interface MyTerminalState {\n  open: boolean;\n}\n\nexport default class MyTerminal extends React.Component<MyTerminalProps, MyTerminalState> {\n\n  private structureService: StructureService;\n\n  public constructor(props: MyTerminalProps) {\n    super(props);\n    this.structureService = new StructureService();\n    this.state = {\n      open: props.open\n    }\n  }\n\n  public componentDidUpdate() {\n    if (this.props.open !== this.state.open) {\n      this.setState({\n        open: this.props.open\n      })\n    }\n  }\n\n  commands = {\n    echo: {\n      description: \"Echo a passed string.\",\n      usage: \"echo <string>\",\n      fn: this.echo.bind(this)\n    },\n    ls: {\n      description: \"View available navigation options\",\n      usage: \"ls\",\n      fn: this.ls.bind(this)\n    },\n    cd: {\n      description: \"Navigate to another page\",\n      usage: \"cd <string>\",\n      fn: this.cd.bind(this)\n    },\n    kill: {\n      description: \"Close terminal\",\n      usage: \"kill\",\n      fn: this.props.closeTerminal,\n    }\n  }\n\n  render () {\n\n    const { location } = this.props;\n    \n    return (\n      <div className=\"app-main-footer\">\n        {this.props.open && <div className=\"app-main-footer-container\">\n          <div className=\"app-main-footer-header\">\n            <div className=\"app-main-footer-header-tabs\">\n              <div className=\"app-main-footer-header-tabs-title\">TERMINAL</div>\n            </div>\n            <div className=\"app-main-footer-header-tools\">\n              <div className=\"app-main-footer-header-tools-trash\">\n                <i className={`${icons.trash}`} onClick={this.props.closeTerminal}></i>\n              </div>\n            </div>\n          </div>\n          <Terminal\n            commands={this.commands}\n            welcomeMessage={\"Welcome to my website! Run help for available commands\"}\n            promptLabel={`user@TBarlow:${this.getPath(location.pathname)}`}\n            promptLabelStyle={{color: \"#66CCCC\"}}\n            noHistory={true}\n            styles={{\n              maxHeight: \"300px\",\n            }}\n          />\n        </div>}        \n      </div>\n    )\n  }\n\n  ls() {\n    const { pathname } = this.props.location;\n    const target = arguments[0];\n    return this.structureService.ls(pathname, target);\n  }\n\n  echo() {\n    return `${Array.from(arguments).join(\" \")}`\n  }\n\n  cd () {\n    const target = arguments[0];\n    const location = this.props.location;\n    try {\n      const path = this.structureService.transformPath(location.pathname, target);\n      this.props.history.push(path)\n    } catch {\n      return `Invalid path: ${location.pathname + target}`\n    }\n  }\n\n  getPath = (pathname: string) => {\n    if (pathname === \"/\") {\n      return \"~\"\n    }\n    return `~${pathname}`;\n  }\n}\n\nexport const TerminalWithRouter = withRouter(MyTerminal);","import React from \"react\";\n\nexport function Header() {\n  return (\n    <div className=\"app-main-header\">\n      {/* <div className=\"icon\">\n        <a href=\"/\">\n          <img src=\"/resources/images/TannerPic.jpg\" alt=\"\"/>\n        </a>\n      </div> */}\n      <div className=\"app-main-header-title\">\n        <h1>tanner barlow</h1>\n      </div>\n      <div className=\"app-main-header-subtitle\"></div>\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport { HashRouter } from \"react-router-dom\";\nimport '../scss/App.css';\nimport \"../scss/App.scss\";\nimport MainContentRouter from \"./components/shell/mainContentRouter\";\nimport { Sidebar } from \"./components/shell/sidebar\";\nimport { TerminalWithRouter } from './components/shell/terminal/terminal';\nimport { isMobile } from \"react-device-detect\"\nimport { Header } from './components/shell/header';\n\nconst App: React.FC = () => {\n  \n  const [terminalOpen, setTerminalOpen] = useState(!isMobile)\n  const [darkTheme, setDarkTheme] = useState(true);\n\n  return (\n      <div className={`app`}>\n        <HashRouter>\n            <Sidebar\n              toggleTerminal={() => setTerminalOpen(!terminalOpen)}\n              toggleTheme={() => setDarkTheme(!darkTheme)}\n              darkTheme={darkTheme}\n            />\n            <div className=\"app-main\">\n              <Header/>\n              <MainContentRouter/>\n              <TerminalWithRouter \n                open={terminalOpen}\n                closeTerminal={() => setTerminalOpen(false)}\n              />\n            </div>\n        </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}