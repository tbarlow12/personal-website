{"version":3,"sources":["services/blogService.ts","react/components/blog/blogPostPreview.tsx","react/pages/blogPage.tsx","react/pages/homePage.tsx","react/components/shell/mainContentRouter.tsx","react/components/shell/sidebar.tsx","react/App.tsx","serviceWorker.ts","index.tsx"],"names":["BlogService","this","getBlogPosts","postsPreviews","title","getBlogPost","postsFull","posts","map","post","blogPost","grayMatter","content","data","preview","BlogPostPreview","className","Date","date","toDateString","source","BlogPage","getPreviews","getFullPost","HomePage","MainContentRouter","path","exact","component","Sidebar","to","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAWaA,EAAb,2GAGI,OAAOC,KAAKC,aAAaC,KAH7B,kCAM4BC,GACxB,OAAOH,KAAKI,YAAaC,EAAkBF,MAP/C,mCAU8BG,GAC1B,OAAOA,EAAMC,IAAIP,KAAKI,eAX1B,kCAc6BI,GACzB,IAAMC,EAA6BC,IAAWF,EAAKG,SAInD,OAHKF,EAASG,KAAKC,UACjBJ,EAASG,KAAKC,QAAU,cAEnBJ,MAnBX,K,iBCPO,SAASK,EAAgBL,GAC9B,OACE,yBAAKM,UAAU,qBACb,yBAAKA,UAAU,2BAA2BN,EAASG,KAAKT,OACxD,6BAAM,IAAIa,KAAKP,EAASG,KAAKK,MAAMC,gBACnC,6BAAMT,EAASG,KAAKC,SACpB,yBAAKE,UAAU,6BACb,kBAAC,IAAD,CAAeI,OAAQV,EAASE,YCHjC,SAASS,IAEd,OACE,oDAEKrB,EAAYsB,cAAcd,IAAIO,GAC/B,kBAACA,EAAoBf,EAAYuB,YAAY,iCCP9C,SAASC,IAWd,OACE,0DCdW,SAASC,IACtB,OACE,yBAAKT,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,QAAQC,OAAK,EAACC,UAAWP,MCPtC,SAASQ,IAEd,OACE,wBAAIb,UAAU,eACZ,4BAAI,kBAAC,IAAD,CAASc,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,SAAZ,UCFV,IAYeC,EAZO,WACpB,OACI,yBAAKf,UAAU,YACb,2CACA,kBAAC,IAAD,KACE,kBAACa,EAAD,MACA,kBAACJ,EAAD,SCAUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.2f24826f.chunk.js","sourcesContent":["\nimport grayMatter from \"gray-matter\";\nimport { BlogPostMetadata } from \"../models/blog\";\nimport postsPreviews from \"../blog/posts-preview.json\";\nimport postsFull from \"../blog/posts-full.json\"\n\nexport interface BlogPostJson {\n  name: string;\n  content: string;\n}\n\nexport class BlogService {\n  \n  public static getPreviews() {\n    return this.getBlogPosts(postsPreviews);\n  }\n\n  public static getFullPost(title: string) {\n    return this.getBlogPost((postsFull as any)[title]);\n  }\n\n  private static getBlogPosts(posts: BlogPostJson[]): BlogPostMetadata[] {\n    return posts.map(this.getBlogPost);\n  }\n\n  private static getBlogPost(post: BlogPostJson): BlogPostMetadata {\n    const blogPost: BlogPostMetadata = grayMatter(post.content) as any;\n    if (!blogPost.data.preview) {\n      blogPost.data.preview = \"No preview\";\n    }\n    return blogPost;\n  }\n}","import React from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { BlogPostMetadata } from \"../../../models/blog\";\n\nexport function BlogPostPreview(blogPost: BlogPostMetadata) {\n  return (\n    <div className=\"blog-post-preview\">\n      <div className=\"blog-post-preview-title\">{blogPost.data.title}</div>\n      <div>{new Date(blogPost.data.date).toDateString()}</div>\n      <div>{blogPost.data.preview}</div>\n      <div className=\"blog-post-preview-content\">\n        <ReactMarkdown source={blogPost.content}/>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport { BlogService } from \"../../services/blogService\";\nimport { BlogPostPreview } from \"../components/blog/blogPostPreview\";\n\nexport interface BlogPageState {\n  \n}\n\nexport function BlogPage() {\n\n  return (\n    <div>\n      This is my blog page\n        {BlogService.getPreviews().map(BlogPostPreview)}\n        <BlogPostPreview {...BlogService.getFullPost(\"My Software Dev Bucket List\")} />\n    </div>\n  )\n}\n\n\n","import React from \"react\";\n\nexport interface HomePageState {\n  pulls: any[];\n  events: any[]\n}\n\nexport function HomePage() {\n\n  // const [pulls, setPulls] = useState();\n  // const [events, setEvents] = useState();\n\n  // const githubService = new GitHubService();\n  // githubService.pulls(\"serverless\", \"serverless-azure-functions\")\n  //   .then((pullResult) => setPulls(pullResult));\n  // githubService.userEvents(\"tbarlow12\")\n  //   .then((eventsResult) => setEvents(eventsResult))\n\n  return (\n    <div>\n      This is my home page test\n      \n      {/* Look at useEffect for fetching data {pulls && pulls.map((pull: any) => <div>{pull.title}</div>)}\n      {events && events.map((event: any) => <div>{event.type}</div>)} */}\n    </div>\n  )\n}","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { BlogPage } from \"../../pages/blogPage\"\nimport { HomePage } from \"../../pages/homePage\";\n\nexport default function MainContentRouter() {\n  return (\n    <div className=\"app-content\">\n      <Switch>\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/blog\" exact component={BlogPage} />\n      </Switch>\n    </div>\n  )\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport function Sidebar() {\n\n  return (\n    <ul className=\"app-sidebar\">\n      <li><NavLink to=\"/\">Home</NavLink></li>\n      <li><NavLink to=\"/blog\">Blog</NavLink></li>\n    </ul>\n  )\n}","import React from 'react';\nimport { HashRouter } from \"react-router-dom\";\nimport '../scss/App.css';\nimport MainContentRouter from \"./components/shell/mainContentRouter\";\nimport { Sidebar } from \"./components/shell/sidebar\";\n\nconst App: React.FC = () => {\n  return (\n      <div className=\"app-main\">\n        <h1>Application</h1>\n        <HashRouter>\n          <Sidebar/>\n          <MainContentRouter/>\n        </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './react/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}