{"version":3,"sources":["react/pages/blogPage.tsx","services/githubService.ts","services/restService.ts","react/pages/homePage.tsx","react/components/shell/mainContentRouter.tsx","react/components/shell/sidebar.tsx","react/App.tsx","serviceWorker.ts","index.tsx"],"names":["BlogPage","GitHubService","owner","repo","this","get","username","baseUrl","relativeUrl","axios","url","method","response","data","HomePage","useState","pulls","setPulls","events","setEvents","githubService","then","pullResult","userEvents","eventsResult","map","pull","title","event","type","MainContentRouter","className","path","exact","component","Sidebar","to","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAOO,SAASA,IAEd,OACE,qD,6FCRSC,EAAb,YACE,aAAsB,qEACd,2BAFV,2GAKqBC,EAAeC,GALpC,gFAMiBC,KAAKC,IAAL,iBAAmBH,EAAnB,YAA4BC,EAA5B,WANjB,wNAS0BG,GAT1B,gFAUiBF,KAAKC,IAAL,iBAAmBC,EAAnB,YAVjB,kJCAA,WAEE,WAA8BC,GAAkB,yBAAlBA,UAFhC,wFAIsBC,GAJtB,sFAK2BC,IAAM,CAC3BC,IAAI,GAAD,OAAKN,KAAKG,SAAV,OAAoBC,GACvBG,OAAQ,QAPd,cAKUC,EALV,yBASWA,EAASC,MATpB,6GCMO,SAASC,IAAY,IAAD,EAECC,qBAFD,mBAElBC,EAFkB,KAEXC,EAFW,OAGGF,qBAHH,mBAGlBG,EAHkB,KAGVC,EAHU,KAKnBC,EAAgB,IAAInB,EAM1B,OALAmB,EAAcJ,MAAM,aAAc,8BAC/BK,KAAK,SAACC,GAAD,OAAgBL,EAASK,KACjCF,EAAcG,WAAW,aACtBF,KAAK,SAACG,GAAD,OAAkBL,EAAUK,KAGlC,oDAEGR,GAASA,EAAMS,IAAI,SAACC,GAAD,OAAe,6BAAMA,EAAKC,SAC7CT,GAAUA,EAAOO,IAAI,SAACG,GAAD,OAAgB,6BAAMA,EAAMC,SClBzC,SAASC,IACtB,OACE,yBAAKC,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWpB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,QAAQC,OAAK,EAACC,UAAWlC,MCPtC,SAASmC,IAEd,OACE,wBAAIJ,UAAU,eACZ,4BAAI,kBAAC,IAAD,CAASK,GAAG,KAAZ,SACJ,4BAAI,kBAAC,IAAD,CAASA,GAAG,SAAZ,UCFV,IAYeC,EAZO,WACpB,OACI,yBAAKN,UAAU,YACb,2CACA,kBAAC,IAAD,KACE,kBAACI,EAAD,MACA,kBAACL,EAAD,SCAUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC,iB","file":"static/js/main.222d7306.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport interface BlogPageState {\r\n  clickCount: number;\r\n  otherClickCount: number;\r\n}\r\n\r\nexport function BlogPage() {\r\n\r\n  return (\r\n    <div>\r\n      This is my blog page\r\n    </div>\r\n  )\r\n}","import { RestService } from \"./restService\"\r\n\r\nexport class GitHubService extends RestService {\r\n  public constructor() {\r\n    super(\"https://api.github.com\");\r\n  }\r\n\r\n  public async pulls(owner: string, repo: string): Promise<any[]> {\r\n    return await this.get(`/repos/${owner}/${repo}/pulls`);\r\n  }\r\n\r\n  public async userEvents(username: string): Promise<any[]> {\r\n    return await this.get(`/users/${username}/events`);\r\n  }\r\n}","import axios from \"axios\";\r\n\r\nexport class RestService {\r\n\r\n  protected constructor(private baseUrl: string) { }\r\n\r\n  protected async get(relativeUrl: string) {\r\n    const response = await axios({\r\n      url: `${this.baseUrl}${relativeUrl}`,\r\n      method: \"get\"\r\n    });\r\n    return response.data;\r\n  } \r\n}","import React, { useState } from \"react\";\r\nimport { GitHubService } from \"../../services/githubService\";\r\n\r\nexport interface HomePageState {\r\n  pulls: any[];\r\n  events: any[]\r\n}\r\n\r\nexport function HomePage() {\r\n\r\n  const [pulls, setPulls] = useState();\r\n  const [events, setEvents] = useState();\r\n\r\n  const githubService = new GitHubService();\r\n  githubService.pulls(\"serverless\", \"serverless-azure-functions\")\r\n    .then((pullResult) => setPulls(pullResult));\r\n  githubService.userEvents(\"tbarlow12\")\r\n    .then((eventsResult) => setEvents(eventsResult))\r\n\r\n  return (\r\n    <div>\r\n      This is my home page\r\n      {pulls && pulls.map((pull: any) => <div>{pull.title}</div>)}\r\n      {events && events.map((event: any) => <div>{event.type}</div>)}\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { BlogPage } from \"../../pages/blogPage\";\r\nimport { HomePage } from \"../../pages/homePage\";\r\n\r\nexport default function MainContentRouter() {\r\n  return (\r\n    <div className=\"app-content\">\r\n      <Switch>\r\n        <Route path=\"/\" exact component={HomePage} />\r\n        <Route path=\"/blog\" exact component={BlogPage} />\r\n      </Switch>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport function Sidebar() {\r\n\r\n  return (\r\n    <ul className=\"app-sidebar\">\r\n      <li><NavLink to=\"/\">Home</NavLink></li>\r\n      <li><NavLink to=\"/blog\">Blog</NavLink></li>\r\n    </ul>\r\n  )\r\n}","import React from 'react';\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport '../scss/App.css';\r\nimport MainContentRouter from \"./components/shell/mainContentRouter\";\r\nimport { Sidebar } from \"./components/shell/sidebar\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n      <div className=\"app-main\">\r\n        <h1>Application</h1>\r\n        <HashRouter>\r\n          <Sidebar/>\r\n          <MainContentRouter/>\r\n        </HashRouter>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './react/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}